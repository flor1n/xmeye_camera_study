class PelcoD extends PtzBase{
	// 协议的显示名称, 最好与文件名直接对应，不能超过16字符
	Name = "PELCOD"
		
	// 指明是云台协议还是矩阵协议，使用"PTZ", "MATRIX"表示
	Type = "PTZ"
	
	// 以ms为单位
	Internal = 200		
	
	// 一下地址范围如无对应的地址范围，都设成0xFF
	
	// 云台地址范围
	CamAddrRange 		= [0x00, 0xFF]
	
	// 监视地址范围
	MonAddrRange		= [0x00, 0xFF]
	
	// 预置点范围
	PresetRange 		= [0x00, 0xFF]
	
	// 自动巡航线路范围
	TourRange			= [0x01, 0xFF]
	
	// 轨迹线路范围
	PatternRange		= [0x01, 0x04]
	
	// 垂直速度范围
	TileSpeedRange 		= [0x01, 0x3F]
	
	// 水平速度范围
	PanSpeedRange 		= [0x01, 0x3F]
	
	// 辅助范围
	AuxRange 			= [0x01, 0x08]
	
	AddrPos 		= 1
	PresetPos 		= 5
	TileSpeedPos 	= 5
	PanSpeedPos 	= 4
	AuxPos 				= 5
	PatternPos    = 5
	
	cmd = []
	
	StartOpr = {
		TileUp 		= [0xff, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00],
		TileDown 	= [0xff, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00],
		PanLeft 	= [0xff, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00],
		PanRight 	= [0xff, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00],
		LeftUp 		= [0xff, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00],
		LeftDown 	= [0xff, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00],
		RightUp		= [0xff, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00],
		RightDown = [0xff, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00],
		
		ZoomWide 	= [0xff, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00],
		ZoomTele 	= [0xff, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00],
		FocusNear	= [0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00],
		FocusFar 	= [0xff, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00],
		IrisSmall	= [0xff, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00],
		IrisLarge	= [0xff, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00],	
		
		LightOn		= [0xff, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00],
		LightOff  = [0xff, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00],
		
		SetPreset 	= [0xff, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00],
		ClearPreset	= [0xff, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00],
		GoToPreset 	= [0xff, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00],
		AutoPanOn	  = [0xFF, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00],
		AutoPanOff	= [0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		SetLeftLimit 	= [0xff, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00],
		SetRightLimit	= [0xff, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00], 
		AutoScanOn 		= [0xff, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00],
		AutoScanOff		= [0xff, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00],
		SetPatternStart = [0xff, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00],
		SetPatternStop 	= [0xff, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00],
		StartPattern 		= [0xff, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00],
		StopPattern     = [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  
		AuxOn 	= [0xff, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00],
		AuxOff 	= [0xff, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00],
		Menu = [0xff, 0x00, 0x00, 0x03, 0x00, 0x5F, 0x00],
		Position = [0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],
		Azimuth  = [0x3a, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0xff]
	}
	
	StopOpr = {
		TileUp 		= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		TileDown 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		PanLeft 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		PanRight 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		LeftUp 		= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		LeftDown 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		RightUp		= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		RightDown = [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		ZoomWide 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		ZoomTele 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		FocusNear = [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		FocusFar 	= [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		IrisSmall = [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		IrisLarge = [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
	}
	
	function CheckSum()
	{
		if (cmd[0] != 0x3a)
		{
			cmd[6] = (cmd[1] + cmd[2] + cmd[3] + cmd[4] + cmd[5]) % 256;
		}
		else
		{
			cmd[8] = (cmd[1] + cmd[2] + cmd[3] + cmd[4] + cmd[5] + cmd[6] + cmd[7]) % 256;
		}
	}
	
	function setSpeed(ver, hor)
  {
  	if (cmd[3] != 0)
	  {
	  	cmd[5] = ver;
	  	cmd[4] = hor;
	  }
  }
  
  function setPosition(hor1, ver1, hor2, ver2)
  {
  	//print("hor1: "+hor1+", hor2: "+hor2+", ver1: "+ver1+", ver2: "+ver2+"\n");
  	local hor = ((hor1 + hor2)/2 - 4096) * 2;
  	local ver = ((ver1 + ver2)/2 - 4096) * 2;
  	local zoom = 0;
  	if((hor1 == hor2) || (ver1 == ver2))
  	{
  		zoom = 0;
  	}
  	else
  	{
  		zoom = (8192/(hor2 - hor1)) * (8192/(ver2 - ver1));
  		if(ver1 < ver2)
  		{
  			zoom = abs(zoom);
  		}
  		else
  		{
  			zoom = -abs(zoom);
  		}
  	}
  	//print("hor: "+hor+", ver: "+ver+", zomm: "+zoom+"\n");
  	
		local max_pos_zoom = 16;
		if (cmd[0] == 0x3a)
		{
			cmd[3] = hor >> 8;
			cmd[4] = hor & 0xff;
			cmd[5] = ver >> 8;
			cmd[6] = ver & 0xff;;
			if (zoom == 0)
			{
				cmd[7] = 0;
			}
			else 
			{
				if (zoom > max_pos_zoom)
				{
					cmd[7] = max_pos_zoom; 
				}
				else 
				{
					cmd[7] = abs(zoom);
				}
				
				if (zoom < 0)
				{
					cmd[7] =  0x80 + cmd[7];
				}
			}
		}
	}

	function setAzimuth(horH, horL, verH, verL)
	{
		if (cmd[0] == 0x3a)
		{
			cmd[4] = horH;
			cmd[5] = horL;
			cmd[6] = verH;
			cmd[7] = verL;
		}
	}

}

local cPelcoD = PelcoD();

return cPelcoD;